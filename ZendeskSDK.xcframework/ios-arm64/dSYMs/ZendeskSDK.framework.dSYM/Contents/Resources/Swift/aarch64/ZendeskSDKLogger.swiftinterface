// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ZendeskSDKLogger
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Foundation
import Swift
@_exported import ZendeskSDKLogger
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
public protocol LoggerFactory {
  static func getLogger(namespace: Swift.String, category: Swift.String) -> any ZendeskSDKLogger.Log
}
@objc(ZDKLogLevel) public enum LogLevel : Swift.Int {
  case `default` = 2
  case info = 3
  case debug = 4
  case error = 5
  case fault = 6
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol Log {
  var namespace: Swift.String { get }
  var category: Swift.String { get }
  func logit(file: Swift.StaticString, line: Swift.Int, function: Swift.StaticString, level: ZendeskSDKLogger.LogLevel, error: (any Swift.Error)?, message: Swift.String, args: [any Swift.CVarArg])
}
extension ZendeskSDKLogger.Log {
  public func `default`(file: Swift.StaticString = #filePath, line: Swift.Int = #line, function: Swift.StaticString = #function, error: (any Swift.Error)? = nil, _ message: Swift.String, _ args: any Swift.CVarArg...)
  public func info(file: Swift.StaticString = #filePath, line: Swift.Int = #line, function: Swift.StaticString = #function, error: (any Swift.Error)? = nil, _ message: Swift.String, _ args: any Swift.CVarArg...)
  public func debug(file: Swift.StaticString = #filePath, line: Swift.Int = #line, function: Swift.StaticString = #function, error: (any Swift.Error)? = nil, _ message: Swift.String, _ args: any Swift.CVarArg...)
  public func error(file: Swift.StaticString = #filePath, line: Swift.Int = #line, function: Swift.StaticString = #function, error: (any Swift.Error)? = nil, _ message: Swift.String, _ args: any Swift.CVarArg...)
  public func fault(file: Swift.StaticString = #filePath, line: Swift.Int = #line, function: Swift.StaticString = #function, error: (any Swift.Error)? = nil, _ message: Swift.String, _ args: any Swift.CVarArg...)
}
@_inheritsConvenienceInitializers @objc(ZDKLogger) final public class Logger : ObjectiveC.NSObject {
  @objc public static var level: ZendeskSDKLogger.LogLevel
  @objc public static var enabled: Swift.Bool
  public static var factory: any ZendeskSDKLogger.LoggerFactory.Type
  public static func getLogger(namespace: Swift.String, category: Swift.String) -> any ZendeskSDKLogger.Log
  @objc override dynamic public init()
  @objc deinit
}
public protocol Loggable {
  static var logNamespace: Swift.String { get }
  static var logCategory: Swift.String { get }
  static var log: any ZendeskSDKLogger.Log { get }
  var log: any ZendeskSDKLogger.Log { get }
}
extension ZendeskSDKLogger.Loggable {
  public static var log: any ZendeskSDKLogger.Log {
    get
  }
  public var log: any ZendeskSDKLogger.Log {
    get
  }
}
extension ZendeskSDKLogger.LogLevel : Swift.Equatable {}
extension ZendeskSDKLogger.LogLevel : Swift.Hashable {}
extension ZendeskSDKLogger.LogLevel : Swift.RawRepresentable {}
