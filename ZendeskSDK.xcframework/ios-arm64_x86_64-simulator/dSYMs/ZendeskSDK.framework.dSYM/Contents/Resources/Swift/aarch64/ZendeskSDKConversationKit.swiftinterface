// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ZendeskSDKConversationKit
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Combine
import CoreTelephony
import Foundation
import MobileCoreServices
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
@_exported import ZendeskSDKConversationKit
import ZendeskSDKCoreUtilities
import ZendeskSDKFayeClient
import ZendeskSDKHTTPClient
import ZendeskSDKLogger
import ZendeskSDKStorage
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc(ZDKFormResponseMessageContent) final public class FormResponseMessageContent : ObjectiveC.NSObject, Swift.Codable, ZendeskSDKConversationKit.Content {
  @objc final public var type: ZendeskSDKConversationKit.MessageType {
    @objc get
  }
  @objc final public let quotedMessageId: Swift.String
  @objc final public var fields: [any ZendeskSDKConversationKit.Field] {
    @objc get
  }
  @objc final public var metadata: [Swift.String : Swift.AnyHashable]? {
    @objc get
  }
  final public let formFields: [ZendeskSDKConversationKit.FormField]
  public init(quotedMessageId: Swift.String, formFields: [ZendeskSDKConversationKit.FormField], metadata: [Swift.String : Swift.AnyHashable]? = nil)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc(ZDKLinkAction) final public class LinkAction : ObjectiveC.NSObject, Swift.Codable, ZendeskSDKConversationKit.MessageAction {
  @objc final public let id: Swift.String
  @objc final public var type: ZendeskSDKConversationKit.ActionType {
    @objc get
  }
  @objc final public let text: Swift.String
  @objc final public let uri: Swift.String
  @objc final public let `default`: Swift.Bool
  @objc final public var metadata: [Swift.String : Swift.AnyHashable]? {
    @objc get
  }
  public init(id: Swift.String, text: Swift.String, uri: Swift.String, default: Swift.Bool, metadata: [Swift.String : Swift.AnyHashable]? = nil)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(ZDKConversation) final public class Conversation : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let id: Swift.String
  @objc final public let type: ZendeskSDKConversationKit.ConversationType
  @objc final public let isDefault: Swift.Bool
  @objc final public let displayName: Swift.String?
  @objc final public let displayDescription: Swift.String?
  @objc final public let iconURL: Swift.String?
  @objc final public let business: [Swift.String]
  @objc final public let businessLastRead: Foundation.Date?
  @objc final public let lastUpdatedAt: Foundation.Date?
  @objc final public var metadata: [Swift.String : Swift.AnyHashable]? {
    @objc get
  }
  @objc final public let participants: [ZendeskSDKConversationKit.Participant]
  @objc final public let messages: [ZendeskSDKConversationKit.Message]
  @objc final public let hasPrevious: Swift.Bool
  @objc final public let myself: ZendeskSDKConversationKit.Participant?
  @objc final public let activity: ZendeskSDKConversationKit.Activity?
  @objc final public let status: ZendeskSDKConversationKit.ConversationStatus
  final public let createdAt: Foundation.Date?
  @objc final public let routingStatus: ZendeskSDKConversationKit.ConversationRoutingStatus
  @objc public init(id: Swift.String, type: ZendeskSDKConversationKit.ConversationType, isDefault: Swift.Bool, displayName: Swift.String? = nil, displayDescription: Swift.String? = nil, iconURL: Swift.String? = nil, business: [Swift.String] = [], businessLastRead: Foundation.Date? = nil, lastUpdatedAt: Foundation.Date? = nil, metadata: [Swift.String : Swift.AnyHashable]? = nil, participants: [ZendeskSDKConversationKit.Participant] = [], messages: [ZendeskSDKConversationKit.Message] = [], hasPrevious: Swift.Bool = false, myself: ZendeskSDKConversationKit.Participant?, activity: ZendeskSDKConversationKit.Activity? = nil, status: ZendeskSDKConversationKit.ConversationStatus = .unknown, createdAt: Foundation.Date? = nil, routingStatus: ZendeskSDKConversationKit.ConversationRoutingStatus = .unknown)
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension ZendeskSDKConversationKit.Conversation {
  final public var mostRecentUpdateTime: Foundation.Date {
    get
  }
}
@objc(ZDKConversationType) public enum ConversationType : Swift.Int, Swift.Codable {
  case personal
  case group
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum FormField : Swift.Equatable, Swift.Hashable {
  case text(ZendeskSDKConversationKit.TextFormField)
  case email(ZendeskSDKConversationKit.EmailFormField)
  case select(ZendeskSDKConversationKit.SelectFormField)
  public var id: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var label: Swift.String {
    get
  }
  public var type: ZendeskSDKConversationKit.FieldType {
    get
  }
  public var value: Swift.String {
    get
  }
  public static func == (a: ZendeskSDKConversationKit.FormField, b: ZendeskSDKConversationKit.FormField) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ZendeskSDKConversationKit.FormField : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc(ZDKUnsupportedMessageContent) final public class UnsupportedMessageContent : ObjectiveC.NSObject, Swift.Codable, ZendeskSDKConversationKit.Content {
  @objc final public var type: ZendeskSDKConversationKit.MessageType {
    @objc get
  }
  @objc final public var metadata: [Swift.String : Swift.AnyHashable]? {
    @objc get
  }
  public init(metadata: [Swift.String : Swift.AnyHashable]? = nil)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc(ZDKPostbackAction) final public class PostbackAction : ObjectiveC.NSObject, Swift.Codable, ZendeskSDKConversationKit.MessageAction {
  @objc final public let id: Swift.String
  @objc final public var type: ZendeskSDKConversationKit.ActionType {
    @objc get
  }
  @objc final public let text: Swift.String
  @objc final public let payload: Swift.String
  @objc final public var metadata: [Swift.String : Swift.AnyHashable]? {
    @objc get
  }
  public init(id: Swift.String, text: Swift.String, payload: Swift.String, metadata: [Swift.String : Swift.AnyHashable]? = nil)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(ZDKCarouselMessageContent) final public class CarouselMessageContent : ObjectiveC.NSObject, Swift.Codable, ZendeskSDKConversationKit.Content {
  @objc final public var type: ZendeskSDKConversationKit.MessageType {
    @objc get
  }
  @objc final public var messageItems: [ZendeskSDKConversationKit.MessageActionItem]
  @objc final public var metadata: [Swift.String : Swift.AnyHashable]? {
    @objc get
  }
  public init(messageItems: [ZendeskSDKConversationKit.MessageActionItem], metadata: [Swift.String : Swift.AnyHashable]? = nil)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc(ZDKRealtimeSettings) final public class RealtimeSettings : ObjectiveC.NSObject, Swift.Codable {
  @objc final public var baseURL: Swift.String
  @objc final public var retryInterval: Foundation.TimeInterval
  @objc final public var maxConnectionAttempts: Swift.Int
  @objc final public var connectionDelay: Foundation.TimeInterval
  @objc final public var enabled: Swift.Bool
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol ConversationKitBuilder {
  func build(with settingsParameters: ZendeskSDKConversationKit.SettingsParameters, callbackQueue: Dispatch.DispatchQueue) -> any ZendeskSDKConversationKit.ConversationKit
}
@objc(ZDKConversationKitBuilder) public protocol ConversationKitBuilderObjC {
  @objc @available(swift, obsoleted: 1.0)
  func build() -> any ZendeskSDKConversationKit.ConversationKitObjC
}
@_inheritsConvenienceInitializers @objc(ZDKDefaultConversationKitBuilder) final public class DefaultConversationKitBuilder : ObjectiveC.NSObject, ZendeskSDKConversationKit.ConversationKitBuilder, ZendeskSDKConversationKit.ConversationKitBuilderObjC {
  final public func build(with settingsParameters: ZendeskSDKConversationKit.SettingsParameters, callbackQueue: Dispatch.DispatchQueue = .main) -> any ZendeskSDKConversationKit.ConversationKit
  @objc override dynamic public init()
  @objc deinit
}
extension ZendeskSDKConversationKit.DefaultConversationKitBuilder {
  @available(swift, obsoleted: 1.0)
  @objc final public func build(config: ZendeskSDKConversationKit.Config, featureFlagManager: ZendeskSDKCoreUtilities.FeatureFlagManager, callbackQueue: Dispatch.DispatchQueue = .main) -> any ZendeskSDKConversationKit.ConversationKitObjC
}
public enum Subrole : Swift.Int, Swift.Codable {
  public typealias RawValue = Swift.String
  case AI
  public var rawValue: ZendeskSDKConversationKit.Subrole.RawValue {
    get
  }
  public init?(rawValue: ZendeskSDKConversationKit.Subrole.RawValue)
}
@_hasMissingDesignatedInitializers @objc(ZDKLocationRequestAction) final public class LocationRequestAction : ObjectiveC.NSObject, Swift.Codable, ZendeskSDKConversationKit.MessageAction {
  @objc final public let id: Swift.String
  @objc final public var type: ZendeskSDKConversationKit.ActionType {
    @objc get
  }
  @objc final public let text: Swift.String
  @objc final public var metadata: [Swift.String : Swift.AnyHashable]? {
    @objc get
  }
  public init(id: Swift.String, text: Swift.String, metadata: [Swift.String : Swift.AnyHashable]? = nil)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(ZDKProactiveMessageStatus) public enum ProactiveMessageStatus : Swift.Int {
  case notificationWillDisplay
  case notificationHasBeenDisplayed
  case notificationHasBeenClicked
  case conversationHasBeenRepliedTo
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(ZDKConversationList) final public class ConversationList : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let conversations: [ZendeskSDKConversationKit.Conversation]
  @objc final public let hasMore: Swift.Bool
  @objc public init(conversations: [ZendeskSDKConversationKit.Conversation], hasMore: Swift.Bool = false)
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol ConversationKit : ZendeskSDKConversationKit.ConversationKitShared {
  func addEventObserver(_ observer: Swift.AnyObject, _ closure: @escaping (ZendeskSDKConversationKit.ConversationKitEvent) -> Swift.Void)
  func createAnonymousUser(with givenName: Swift.String?, surname: Swift.String?, proactiveMessageId: Swift.String?, result: ((Swift.Result<ZendeskSDKConversationKit.User, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  @available(iOS 13.0.0, *)
  func createAnonymousUser(with givenName: Swift.String?, surname: Swift.String?, proactiveMessageId: Swift.String?) async throws -> ZendeskSDKConversationKit.User
  func getConversation(with identifier: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.Conversation, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  @available(iOS 13.0.0, *)
  func getConversation(with identifier: Swift.String) async throws -> ZendeskSDKConversationKit.Conversation
  func getConversations(offset: Swift.Int, result: ((Swift.Result<ZendeskSDKConversationKit.ConversationList, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  @available(iOS 13.0.0, *)
  func getConversations(offset: Swift.Int) async throws -> ZendeskSDKConversationKit.ConversationList
  func refreshConversation(with identifier: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.Conversation, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  @available(iOS 13.0.0, *)
  func refreshConversation(with identifier: Swift.String) async throws -> ZendeskSDKConversationKit.Conversation
  func getMessages(before timestamp: Foundation.Date, conversationId: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.Conversation, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  @available(iOS 13.0.0, *)
  func getMessages(before timestamp: Foundation.Date, conversationId: Swift.String) async throws -> ZendeskSDKConversationKit.Conversation
  func sendMessage(message: ZendeskSDKConversationKit.Message, conversationId: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.Message, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  @available(iOS 13.0.0, *)
  func sendMessage(message: ZendeskSDKConversationKit.Message, conversationId: Swift.String) async throws -> ZendeskSDKConversationKit.Message
  func sendPostbackAction(actionId: ZendeskSDKConversationKit.PostbackActionID, actionTitle: ZendeskSDKConversationKit.MessageActionTitle, conversationId: Swift.String, result: ((Swift.Result<Swift.Void, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  @available(iOS 13.0.0, *)
  func sendPostbackAction(actionId: ZendeskSDKConversationKit.PostbackActionID, actionTitle: ZendeskSDKConversationKit.MessageActionTitle, conversationId: Swift.String) async throws
  func sendConversationActivity(activity: ZendeskSDKConversationKit.ActivityType, conversationId: Swift.String, result: ((Swift.Result<Swift.Void, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  @available(iOS 13.0.0, *)
  func sendConversationActivity(activity: ZendeskSDKConversationKit.ActivityType, conversationId: Swift.String) async throws
  func loginUser(with jwt: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.User, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  @available(iOS 13.0.0, *)
  func loginUser(with jwt: Swift.String) async throws -> ZendeskSDKConversationKit.User
  func logoutUser(result: ((Swift.Result<Swift.Void, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  @available(iOS 13.0.0, *)
  func logoutUser() async throws
  func createConversation(proactiveMessageId: Swift.String?, result: ((Swift.Result<ZendeskSDKConversationKit.Conversation, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  @available(iOS 13.0.0, *)
  func createConversation(proactiveMessageId: Swift.String?) async throws -> ZendeskSDKConversationKit.Conversation
  func getVisitType(result: ((Swift.Result<ZendeskSDKConversationKit.VisitType, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  @available(iOS 13.0.0, *)
  func getVisitType() async throws -> ZendeskSDKConversationKit.VisitType
  func sendConversationReferral(proactiveMessageId: Swift.String, conversationId: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.Conversation, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  @available(iOS 13.0.0, *)
  func sendConversationReferral(proactiveMessageId: Swift.String, conversationId: Swift.String) async throws -> ZendeskSDKConversationKit.Conversation
  func setConversationFields(_ fields: [Swift.String : Swift.AnyHashable])
  func setConversationTags(_ tags: [Swift.String])
  func clearConversationFields()
  func clearConversationTags()
  func fetchWaitTimeForConversation(conversationId: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.WaitTimeData, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  @available(iOS 13.0.0, *)
  func fetchWaitTimeForConversation(conversationId: Swift.String) -> Combine.AnyPublisher<ZendeskSDKConversationKit.WaitTimeData, ZendeskSDKConversationKit.ConversationKitError>
  func stopFetchingWaitTime()
}
extension ZendeskSDKConversationKit.ConversationKit {
  public func createAnonymousUser(with givenName: Swift.String? = nil, surname: Swift.String? = nil, proactiveMessageId: Swift.String? = nil, result: ((Swift.Result<ZendeskSDKConversationKit.User, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)? = nil)
  @available(iOS 13.0.0, *)
  public func createAnonymousUser(with givenName: Swift.String?, surname: Swift.String?, proactiveMessageId: Swift.String? = nil) async throws -> ZendeskSDKConversationKit.User
  public func getConversation(with identifier: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.Conversation, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)? = nil)
  @available(iOS 13.0.0, *)
  public func getConversation(with identifier: Swift.String) async throws -> ZendeskSDKConversationKit.Conversation
  public func getConversations(offset: Swift.Int, result: ((Swift.Result<ZendeskSDKConversationKit.ConversationList, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  @available(iOS 13.0.0, *)
  public func getConversations(offset: Swift.Int) async throws -> ZendeskSDKConversationKit.ConversationList
  public func refreshConversation(with identifier: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.Conversation, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  @available(iOS 13.0.0, *)
  public func refreshConversation(with identifier: Swift.String) async throws -> ZendeskSDKConversationKit.Conversation
  public func getMessages(before timestamp: Foundation.Date, conversationId: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.Conversation, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  @available(iOS 13.0.0, *)
  public func getMessages(before timestamp: Foundation.Date, conversationId: Swift.String) async throws -> ZendeskSDKConversationKit.Conversation
  public func sendMessage(message: ZendeskSDKConversationKit.Message, conversationId: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.Message, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)? = nil)
  @available(iOS 13.0.0, *)
  public func sendMessage(message: ZendeskSDKConversationKit.Message, conversationId: Swift.String) async throws -> ZendeskSDKConversationKit.Message
  public func sendPostbackAction(actionId: ZendeskSDKConversationKit.PostbackActionID, conversationId: Swift.String, actionTitle: ZendeskSDKConversationKit.MessageActionTitle, result: ((Swift.Result<Swift.Void, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  @available(iOS 13.0.0, *)
  public func sendPostbackAction(actionId: ZendeskSDKConversationKit.PostbackActionID, actionTitle: ZendeskSDKConversationKit.MessageActionTitle, conversationId: Swift.String) async throws
  public func sendConversationActivity(activity: ZendeskSDKConversationKit.ActivityType, conversationId: Swift.String, result: ((Swift.Result<Swift.Void, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)?)
  @available(iOS 13.0.0, *)
  public func sendConversationActivity(activity: ZendeskSDKConversationKit.ActivityType, conversationId: Swift.String) async throws
  public func loginUser(with jwt: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.User, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)? = nil)
  @available(iOS 13.0.0, *)
  public func loginUser(with jwt: Swift.String) async throws -> ZendeskSDKConversationKit.User
  public func logoutUser(result: ((Swift.Result<Swift.Void, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)? = nil)
  @available(iOS 13.0.0, *)
  public func logoutUser() async throws
  public func createConversation(proactiveMessageId: Swift.String? = nil, result: ((Swift.Result<ZendeskSDKConversationKit.Conversation, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)? = nil)
  @available(iOS 13.0.0, *)
  public func createConversation(proactiveMessageId: Swift.String? = nil) async throws -> ZendeskSDKConversationKit.Conversation
  public func proactiveMessageStatusChanged(_ status: ZendeskSDKConversationKit.ProactiveMessageStatus, proactiveMessage: ZendeskSDKConversationKit.ProactiveMessage, jwt: Swift.String? = nil)
  public func clearProactiveMessages(proactiveMessageIds: [Swift.String])
  public func getVisitType(result: ((Swift.Result<ZendeskSDKConversationKit.VisitType, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)? = nil)
  @available(iOS 13.0.0, *)
  public func getVisitType() async throws -> ZendeskSDKConversationKit.VisitType
  public func sendConversationReferral(proactiveMessageId: Swift.String, conversationId: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.Conversation, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)? = nil)
  @available(iOS 13.0.0, *)
  public func sendConversationReferral(proactiveMessageId: Swift.String, conversationId: Swift.String) async throws -> ZendeskSDKConversationKit.Conversation
  public func setConversationFields(_ fields: [Swift.String : Swift.AnyHashable])
  public func setConversationTags(_ tags: [Swift.String])
  public func clearConversationFields()
  public func clearConversationTags()
  public func fetchWaitTimeForConversation(conversationId: Swift.String, result: ((Swift.Result<ZendeskSDKConversationKit.WaitTimeData, ZendeskSDKConversationKit.ConversationKitError>) -> Swift.Void)? = nil)
  @available(iOS 13.0.0, *)
  public func fetchWaitTimeForConversation(conversationId: Swift.String) -> Combine.AnyPublisher<ZendeskSDKConversationKit.WaitTimeData, ZendeskSDKConversationKit.ConversationKitError>
  public func stopFetchingWaitTime()
}
@objc public protocol ConversationKitShared {
  @objc var clientId: Swift.String { get }
  @objc var config: ZendeskSDKConversationKit.Config { get }
  @objc var featureFlagManager: ZendeskSDKCoreUtilities.FeatureFlagManager { get }
  @objc var currentUser: ZendeskSDKConversationKit.User? { get }
  @objc var hasActiveConversationInLatestTen: Swift.Bool { get }
  @objc func removeEventObserver(_ observer: Swift.AnyObject)
  @objc func pause()
  @objc func resume()
  @objc func updatePushNotificationToken(_ token: Swift.String)
  @objc func proactiveMessageStatusChanged(_ status: ZendeskSDKConversationKit.ProactiveMessageStatus, proactiveMessage: ZendeskSDKConversationKit.ProactiveMessage, jwt: Swift.String?)
  @objc func setVisitType(_ visitType: ZendeskSDKConversationKit.VisitType)
  @objc func clearProactiveMessages(proactiveMessageIds: [Swift.String])
  @objc func setConversationFields(_ fields: [Swift.String : Swift.AnyHashable])
  @objc func setConversationTags(_ tags: [Swift.String])
  @objc func clearConversationFields()
  @objc func clearConversationTags()
  @objc func updateUserConversations(_ conversations: [ZendeskSDKConversationKit.Conversation])
  @objc func stopFetchingWaitTime()
}
@objc(ZDKConversationKit) public protocol ConversationKitObjC : ZendeskSDKConversationKit.ConversationKitShared {
  @objc @available(swift, obsoleted: 1.0)
  func addEventObserver(_ observer: Swift.AnyObject, closure: ((ZendeskSDKConversationKit.ZDKConversationKitEvent, Swift.AnyObject?) -> Swift.Void)?)
  @objc @available(swift, obsoleted: 1.0)
  func createAnonymousUser(with givenName: Swift.String?, surname: Swift.String?, proactiveMessageId: Swift.String?, completion: ((ZendeskSDKConversationKit.User?, (any Swift.Error)?) -> Swift.Void)?)
  @objc @available(swift, obsoleted: 1.0)
  func getConversation(with identifier: Swift.String, completion: ((ZendeskSDKConversationKit.Conversation?, (any Swift.Error)?) -> Swift.Void)?)
  @objc @available(swift, obsoleted: 1.0)
  func getConversations(offset: Swift.Int, completion: ((ZendeskSDKConversationKit.ConversationList, (any Swift.Error)?) -> Swift.Void)?)
  @objc @available(swift, obsoleted: 1.0)
  func getMessages(before timestamp: Foundation.Date, conversationId: Swift.String, completion: ((ZendeskSDKConversationKit.Conversation?, (any Swift.Error)?) -> Swift.Void)?)
  @objc @available(swift, obsoleted: 1.0)
  func sendMessage(message: ZendeskSDKConversationKit.Message, conversationId: Swift.String, completion: ((ZendeskSDKConversationKit.Message?, (any Swift.Error)?) -> Swift.Void)?)
  @objc @available(swift, obsoleted: 1.0)
  func sendConversationActivity(activity: ZendeskSDKConversationKit.ActivityType, conversationId: Swift.String, completion: (((any Swift.Error)?) -> Swift.Void)?)
  @objc @available(swift, obsoleted: 1.0)
  func loginUser(with jwt: Swift.String, completion: ((ZendeskSDKConversationKit.User?, (any Swift.Error)?) -> Swift.Void)?)
  @objc @available(swift, obsoleted: 1.0)
  func logoutUser(completion: (((any Swift.Error)?) -> Swift.Void)?)
  @objc @available(swift, obsoleted: 1.0)
  func createConversation(proactiveMessageId: Swift.String?, completion: ((ZendeskSDKConversationKit.Conversation?, (any Swift.Error)?) -> Swift.Void)?)
  @objc @available(swift, obsoleted: 1.0)
  func getVisitType(completion: ((ZendeskSDKConversationKit.VisitType, (any Swift.Error)?) -> Swift.Void)?)
  @objc @available(swift, obsoleted: 1.0)
  func sendConversationReferral(proactiveMessageId: Swift.String, conversationId: Swift.String, completion: ((ZendeskSDKConversationKit.Conversation?, (any Swift.Error)?) -> Swift.Void)?)
  @objc @available(swift, obsoleted: 1.0)
  func fetchWaitTimeForConversation(conversationId: Swift.String, completion: ((ZendeskSDKConversationKit.WaitTimeData?, (any Swift.Error)?) -> Swift.Void)?)
}
public typealias MessageActionTitle = Swift.String
@objc(ZDKMessageContent) public protocol Content : ObjectiveC.NSObjectProtocol {
  @objc var type: ZendeskSDKConversationKit.MessageType { get }
  @objc var metadata: [Swift.String : Swift.AnyHashable]? { get }
}
public enum MessageContent : Swift.Equatable, Swift.Hashable {
  case text(ZendeskSDKConversationKit.TextMessageContent)
  case form(ZendeskSDKConversationKit.FormMessageContent)
  case formResponse(ZendeskSDKConversationKit.FormResponseMessageContent)
  case carousel(ZendeskSDKConversationKit.CarouselMessageContent)
  case image(ZendeskSDKConversationKit.ImageMessageContent)
  case file(ZendeskSDKConversationKit.FileMessageContent)
  case unsupported(ZendeskSDKConversationKit.UnsupportedMessageContent)
  public static func == (a: ZendeskSDKConversationKit.MessageContent, b: ZendeskSDKConversationKit.MessageContent) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ZendeskSDKConversationKit.MessageContent : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ConversationKitError : Foundation.LocalizedError, Foundation.CustomNSError, Swift.Equatable {
  case mappingError
  case incorrectAccessLevelForAction
  case httpError(description: Swift.String, httpError: ZendeskSDKHTTPClient.HTTPError)
  case userExists
  case failedToDecodeJWT
  case expiredJWT
  public static var errorDomain: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
  public static func == (a: ZendeskSDKConversationKit.ConversationKitError, b: ZendeskSDKConversationKit.ConversationKitError) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @objc(ZDKWaitTimeData) final public class WaitTimeData : ObjectiveC.NSObject {
  @objc final public let queuePositionNumber: Foundation.NSNumber
  @objc final public let lowestQueuePositionNumber: Foundation.NSNumber?
  @objc final public let responseTime: ZendeskSDKConversationKit.ResponseTime?
  @objc final public let isInitialRouting: Swift.Bool
  final public var lowestQueuePosition: Swift.Int? {
    get
  }
  final public var queuePosition: Swift.Int {
    get
  }
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(ZDKProactiveMessage) public class ProactiveMessage : ObjectiveC.NSObject {
  @objc final public let id: Swift.String
  @objc final public let title: Swift.String
  @objc final public let body: Swift.String
  @objc final public let campaignId: Swift.String
  @objc final public let campaignVersion: Swift.Int
  public init(id: Swift.String, title: Swift.String, body: Swift.String, campaignId: Swift.String, campaignVersion: Swift.Int)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(ZDKMessageActionItem) final public class MessageActionItem : ObjectiveC.NSObject, Swift.Codable {
  @objc final public var title: Swift.String
  @objc final public var itemDescription: Swift.String
  @objc final public var mediaURL: Swift.String
  @objc final public var attachmentId: Swift.String?
  @objc final public var mediaType: Swift.String
  @objc final public var messageActions: [any ZendeskSDKConversationKit.MessageAction] {
    @objc get
  }
  @objc final public let size: ZendeskSDKConversationKit.ActionItemSize
  final public let actions: [ZendeskSDKConversationKit.MessageActionModel]
  public init(title: Swift.String, itemDescription: Swift.String, mediaURL: Swift.String, attachmentId: Swift.String? = nil, size: ZendeskSDKConversationKit.ActionItemSize, mediaType: Swift.String, actions: [ZendeskSDKConversationKit.MessageActionModel])
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(ZDKMessageItemSize) public enum ActionItemSize : Swift.Int, Swift.Codable {
  case large
  case compact
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct SettingsParameters : Swift.Equatable {
  public let config: ZendeskSDKConversationKit.Config
  public init(config: ZendeskSDKConversationKit.Config, featureFlagManager: ZendeskSDKCoreUtilities.FeatureFlagManager)
  public static func == (a: ZendeskSDKConversationKit.SettingsParameters, b: ZendeskSDKConversationKit.SettingsParameters) -> Swift.Bool
}
@objc(ZDKAuthorType) public enum AuthorType : Swift.Int, Swift.Codable, Swift.Equatable {
  case user
  case business
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(ZDKUser) final public class User : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let id: Swift.String
  @objc final public let givenName: Swift.String
  @objc final public let surname: Swift.String
  @objc final public let locale: Swift.String
  @objc final public let externalId: Swift.String
  @objc final public let conversations: [ZendeskSDKConversationKit.Conversation]
  @objc final public let realtimeSettings: ZendeskSDKConversationKit.RealtimeSettings
  @objc final public let authentication: ZendeskSDKConversationKit.Authentication
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension ZendeskSDKConversationKit.User {
  @objc final public var isLatestConversationActive: Swift.Bool {
    @objc get
  }
}
@objc(ZDKImageMessageContent) final public class ImageMessageContent : ObjectiveC.NSObject, Swift.Codable, ZendeskSDKConversationKit.Content {
  @objc final public var type: ZendeskSDKConversationKit.MessageType {
    @objc get
  }
  @objc final public let mediaURL: Swift.String
  @objc final public let attachmentId: Swift.String?
  @objc final public let text: Swift.String
  @objc final public let htmlText: Swift.String?
  final public let actions: [ZendeskSDKConversationKit.MessageActionModel]?
  @objc final public var messageActions: [any ZendeskSDKConversationKit.MessageAction]? {
    @objc get
  }
  @objc final public var metadata: [Swift.String : Swift.AnyHashable]? {
    @objc get
  }
  public init(mediaURL: Swift.String, attachmentId: Swift.String? = nil, text: Swift.String? = nil, htmlText: Swift.String? = nil, actions: [ZendeskSDKConversationKit.MessageActionModel]? = nil, metadata: [Swift.String : Swift.AnyHashable]? = nil)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc(ZDKOption) final public class Option : ObjectiveC.NSObject, Swift.Codable {
  final public let label: Swift.String
  final public let name: Swift.String
  public init(label: Swift.String, name: Swift.String)
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc(ZDKParticipant) final public class Participant : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let id: Swift.String
  @objc final public let appUserId: Swift.String
  @objc final public let unreadCount: Swift.Int
  @objc final public let lastRead: Foundation.Date?
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(ZDKField) public protocol Field : ObjectiveC.NSObjectProtocol {
  @objc var id: Swift.String { get }
  @objc var type: ZendeskSDKConversationKit.FieldType { get }
  @objc var name: Swift.String { get }
  @objc var label: Swift.String { get }
  @objc var value: Swift.String { get }
}
@objc(ZDKActivityType) public enum ActivityType : Swift.Int, Swift.Codable {
  case conversationRead
  case typingStart
  case typingStop
  case conversationRoutingQueued
  case conversationRoutingAssigned
  case conversationRoutingCleared
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(ZDKConfig) final public class Config : ObjectiveC.NSObject {
  @objc final public var appId: Swift.String
  @objc final public var baseURL: Swift.String
  @objc final public var settingsBaseURL: Swift.String
  @objc final public let integrationId: Swift.String
  @objc final public let restRetryPolicy: ZendeskSDKConversationKit.RestRetryPolicy
  @objc final public let waitTimeConfig: ZendeskSDKConversationKit.WaitTimeConfig
  final public let region: ZendeskSDKConversationKit.Config.Region
  @objc(ZDKRegion) public enum Region : Swift.Int {
    case us
    case eu
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public init(appId: Swift.String, baseURL: Swift.String, settingsBaseURL: Swift.String, integrationId: Swift.String, region: ZendeskSDKConversationKit.Config.Region = .us, restRetryPolicy: ZendeskSDKConversationKit.RestRetryPolicy, waitTimeConfig: ZendeskSDKConversationKit.WaitTimeConfig)
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(ZDKConversationRoutingStatus) public enum ConversationRoutingStatus : Swift.Int, Swift.Codable {
  case queued
  case assigned
  case unknown
  public init?(stringValue: Swift.String)
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(ZDKWaitTimeConfig) public class WaitTimeConfig : ObjectiveC.NSObject {
  @objc final public let waitTimeEnabled: Swift.Bool
  @objc final public let queuePositionEnabled: Swift.Bool
  @objc final public let onlyDecreasingQueue: Swift.Bool
  @objc final public let waitTimeOverride: Foundation.NSNumber?
  @objc final public let queuePollingInterval: Swift.Int
  @objc public init(waitTimeEnabled: Swift.Bool, queuePositionEnabled: Swift.Bool, onlyDecreasingQueue: Swift.Bool, waitTimeOverride: Foundation.NSNumber?, queuePollingInterval: Swift.Int)
  @objc deinit
}
@objc(ZDKMessageType) public enum MessageType : Swift.Int, Swift.Codable {
  case text
  case file
  case image
  case carousel
  case list
  case location
  case form
  case formResponse
  case unsupported
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ConversationKitEvent {
  case connectionStatusChanged(ZendeskSDKConversationKit.ConnectionStatus)
  case userUpdated(ZendeskSDKConversationKit.User)
  case userAccessRevoked(error: ZendeskSDKConversationKit.ConversationKitError)
  case conversationUpdated(ZendeskSDKConversationKit.Conversation)
  case activityReceived(activity: ZendeskSDKConversationKit.Activity, conversationId: Swift.String)
  case messageReceived(message: ZendeskSDKConversationKit.Message, conversationId: Swift.String)
  case messageUpdated(message: ZendeskSDKConversationKit.Message, conversationId: Swift.String)
  case sendMessageFailed(error: ZendeskSDKConversationKit.ConversationKitError)
  case pushTokenPrepared(Swift.String)
  case pushTokenUpdateResult(token: Swift.String, error: ZendeskSDKConversationKit.ConversationKitError?)
  case loginResult(result: Swift.Result<ZendeskSDKConversationKit.User, ZendeskSDKConversationKit.ConversationKitError>)
  case logoutResult(error: ZendeskSDKConversationKit.ConversationKitError?)
  case persistedUserRetrieved(ZendeskSDKConversationKit.User)
  case conversationStarted(conversation: ZendeskSDKConversationKit.Conversation)
  case conversationAdded(conversation: ZendeskSDKConversationKit.Conversation)
  case conversationRemoved(conversationId: Swift.String)
  case proactiveMessageStatusChanged(status: ZendeskSDKConversationKit.ProactiveMessageStatus, proactiveMessage: ZendeskSDKConversationKit.ProactiveMessage)
  case openWebViewMessageReceived(url: Swift.String, size: ZendeskSDKConversationKit.WebViewActionSize, conversationId: Swift.String)
  case fetchWaitTimeDataResult(conversationId: Swift.String, result: Swift.Result<ZendeskSDKConversationKit.WaitTimeData, ZendeskSDKConversationKit.ConversationKitError>)
}
extension ZendeskSDKConversationKit.ConversationKitEvent : Swift.Equatable {
  public static func == (a: ZendeskSDKConversationKit.ConversationKitEvent, b: ZendeskSDKConversationKit.ConversationKitEvent) -> Swift.Bool
}
@objc public enum ZDKConversationKitEvent : Swift.Int {
  case connectionStatusChanged
  case userUpdated
  case userAccessRevoked
  case conversationUpdated
  case newActivity
  case newMessage
  case messageUpdated
  case sendMessageFailed
  case pushTokenPrepared
  case pushTokenUpdateResult
  case loginResult
  case logoutResult
  case persistedUserRetrieved
  case conversationStarted
  case conversationAdded
  case conversationRemoved
  case proactiveMessageStatusChanged
  case openWebViewMessageReceived
  case getWaitTimeDataResult
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc final public class ZDKMessageEvent : ObjectiveC.NSObject {
  @objc final public let message: ZendeskSDKConversationKit.Message
  @objc final public let conversationId: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class ZDKActivityEvent : ObjectiveC.NSObject {
  @objc final public let activity: ZendeskSDKConversationKit.Activity
  @objc final public let conversationId: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class ZDKPushTokenEvent : ObjectiveC.NSObject {
  @objc final public let token: Swift.String
  @objc final public let error: (any Swift.Error)?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class ZDKLoginResult : ObjectiveC.NSObject {
  @objc final public let user: ZendeskSDKConversationKit.User?
  @objc final public let error: (any Swift.Error)?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class ZDKProactiveMessageStatusChanged : ObjectiveC.NSObject {
  @objc final public let status: ZendeskSDKConversationKit.ProactiveMessageStatus
  @objc final public let proactiveMessage: ZendeskSDKConversationKit.ProactiveMessage
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class ZDKOpenWebViewMessageReceived : ObjectiveC.NSObject {
  @objc final public let url: Swift.String
  @objc final public let conversationId: Swift.String
  @objc final public let size: ZendeskSDKConversationKit.WebViewActionSize
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class ZDKWaitTimeDataResult : ObjectiveC.NSObject {
  @objc final public let conversationId: Swift.String
  @objc final public let waitTimeData: ZendeskSDKConversationKit.WaitTimeData?
  @objc final public let error: (any Swift.Error)?
  @objc deinit
}
@objc(ZDKFieldType) public enum FieldType : Swift.Int, Swift.Codable {
  case text
  case email
  case select
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(ZDKResponseTime) final public class ResponseTime : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let upperNumber: Foundation.NSNumber?
  @objc final public let lowerNumber: Foundation.NSNumber?
  @objc final public let valueNumber: Foundation.NSNumber?
  final public var upper: Swift.Int? {
    get
  }
  final public var lower: Swift.Int? {
    get
  }
  final public var value: Swift.Double? {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(ZDKSelectFormField) final public class SelectFormField : ObjectiveC.NSObject, Swift.Codable, ZendeskSDKConversationKit.Field {
  @objc final public var type: ZendeskSDKConversationKit.FieldType {
    @objc get
  }
  @objc final public let id: Swift.String
  @objc final public let name: Swift.String
  @objc final public let label: Swift.String
  @objc final public let placeholder: Swift.String?
  @objc final public let select: [ZendeskSDKConversationKit.Option]?
  final public let selectSize: Swift.Int?
  @objc final public let options: [ZendeskSDKConversationKit.Option]
  @objc final public var value: Swift.String {
    @objc get
  }
  public init(id: Swift.String, name: Swift.String, label: Swift.String, placeholder: Swift.String?, select: [ZendeskSDKConversationKit.Option]?, selectSize: Swift.Int?, options: [ZendeskSDKConversationKit.Option])
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension ZendeskSDKConversationKit.SelectFormField {
  @available(swift, obsoleted: 1.0)
  @objc final public var selectSizeObjc: Swift.Int {
    @objc get
  }
}
@objc(ZDKAuthor) final public class Author : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let id: Swift.String
  @objc final public let type: ZendeskSDKConversationKit.AuthorType
  @objc final public let displayName: Swift.String?
  @objc final public var avatarURL: Swift.String?
  @objc final public var subroles: [Swift.String]?
  @objc public init(id: Swift.String, type: ZendeskSDKConversationKit.AuthorType, displayName: Swift.String? = nil, avatarURL: Swift.String? = nil, subroles: [Swift.String]? = nil)
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension ZendeskSDKConversationKit.Author {
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public var debugDescription: Swift.String {
    @objc get
  }
}
@objc(ZDKActivity) final public class Activity : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let id: Swift.String
  @objc final public let type: ZendeskSDKConversationKit.ActivityType
  @objc final public let authorType: ZendeskSDKConversationKit.AuthorType
  @objc final public let name: Swift.String?
  @objc final public let avatarURL: Swift.String?
  @objc final public let appUserId: Swift.String?
  @objc final public let lastRead: Foundation.Date?
  final public let isInitialRouting: Swift.Bool
  final public let queuePosition: Swift.Int?
  final public let lowestQueuePosition: Swift.Int?
  final public let responseTime: ZendeskSDKConversationKit.ResponseTime?
  final public let startAt: Swift.Int?
  public init(id: Swift.String = UUID().uuidString, type: ZendeskSDKConversationKit.ActivityType, authorType: ZendeskSDKConversationKit.AuthorType, name: Swift.String?, avatarURL: Swift.String?, appUserId: Swift.String? = nil, lastRead: Foundation.Date? = nil, isInitialRouting: Swift.Bool = false, queuePosition: Swift.Int? = nil, lowestQueuePosition: Swift.Int? = nil, responseTime: ZendeskSDKConversationKit.ResponseTime? = nil, startAt: Swift.Int? = nil)
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(ZDKConnectionStatus) public enum ConnectionStatus : Swift.Int {
  case disconnected = 0
  case connected = 1
  case connectingRealtime = 2
  case connectedRealtime = 3
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(ZDKTextMessageContent) final public class TextMessageContent : ObjectiveC.NSObject, Swift.Codable, ZendeskSDKConversationKit.Content {
  @objc final public var type: ZendeskSDKConversationKit.MessageType {
    @objc get
  }
  @objc final public let text: Swift.String
  @objc final public let htmlText: Swift.String?
  @objc final public let payload: Swift.String?
  final public let actions: [ZendeskSDKConversationKit.MessageActionModel]?
  @objc final public var messageActions: [any ZendeskSDKConversationKit.MessageAction]? {
    @objc get
  }
  @objc final public var metadata: [Swift.String : Swift.AnyHashable]? {
    @objc get
  }
  public init(text: Swift.String, htmlText: Swift.String? = nil, payload: Swift.String? = nil, actions: [ZendeskSDKConversationKit.MessageActionModel]? = nil, metadata: [Swift.String : Swift.AnyHashable]? = nil)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc(ZDKWebViewAction) final public class WebViewAction : ObjectiveC.NSObject, Swift.Codable, ZendeskSDKConversationKit.MessageAction {
  @objc final public let id: Swift.String
  @objc final public var type: ZendeskSDKConversationKit.ActionType {
    @objc get
  }
  @objc final public let text: Swift.String
  @objc final public let uri: Swift.String
  @objc final public let `default`: Swift.Bool
  @objc final public let fallback: Swift.String
  @objc final public var metadata: [Swift.String : Swift.AnyHashable]? {
    @objc get
  }
  @objc final public let openOnReceive: Swift.Bool
  @objc final public let size: ZendeskSDKConversationKit.WebViewActionSize
  public init(id: Swift.String, text: Swift.String, uri: Swift.String, default: Swift.Bool, fallback: Swift.String, metadata: [Swift.String : Swift.AnyHashable]? = nil, openOnReceive: Swift.Bool, size: ZendeskSDKConversationKit.WebViewActionSize)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(ZDKWebViewActionSize) public enum WebViewActionSize : Swift.Int, Swift.Codable, Swift.Equatable {
  case full
  case tall
  case compact
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(ZDKRestRetryPolicy) final public class RestRetryPolicy : ObjectiveC.NSObject {
  @objc final public let regular: Swift.Int
  @objc final public let aggressive: Swift.Int
  @objc final public let timeUnit: Foundation.UnitDuration
  @objc final public let backOffMultiplier: Swift.Int
  @objc final public let maxRetries: Swift.Int
  public init(regular: Swift.Int, aggressive: Swift.Int, timeUnit: Foundation.UnitDuration, backOffMultiplier: Swift.Int, maxRetries: Swift.Int)
  @objc deinit
}
extension ZendeskSDKConversationKit.RestRetryPolicy {
  public static var `default`: ZendeskSDKConversationKit.RestRetryPolicy {
    get
  }
}
@objc(ZDKVisitType) public enum VisitType : Swift.Int, Swift.Codable {
  case new
  case `repeat`
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(ZDKMessage) final public class Message : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let id: Swift.String
  final public let content: ZendeskSDKConversationKit.MessageContent
  @objc final public var messageContent: any ZendeskSDKConversationKit.Content {
    @objc get
  }
  @objc final public var messageType: ZendeskSDKConversationKit.MessageType {
    @objc get
  }
  @objc final public let createdAt: Foundation.Date?
  @objc final public let receivedAt: Foundation.Date?
  @objc final public let status: ZendeskSDKConversationKit.MessageStatus
  @objc final public let author: ZendeskSDKConversationKit.Author
  @objc final public let sourceId: Swift.String?
  @objc final public let localId: Swift.String
  @objc final public var timestamp: Foundation.Date {
    @objc get
  }
  final public var actions: [ZendeskSDKConversationKit.MessageActionModel]? {
    get
  }
  @objc final public var messageActions: [any ZendeskSDKConversationKit.MessageAction]? {
    @objc get
  }
  public init(id: Swift.String = UUID().uuidString, content: ZendeskSDKConversationKit.MessageContent, createdAt: Foundation.Date? = Date(), receivedAt: Foundation.Date? = nil, status: ZendeskSDKConversationKit.MessageStatus = .pending, author: ZendeskSDKConversationKit.Author = .init(id: UUID().uuidString, type: .user), sourceId: Swift.String? = nil, localId: Swift.String? = nil)
  @objc convenience public init(text: Swift.String, payload: Swift.String? = nil, metadata: [Swift.String : Swift.AnyHashable]? = nil)
  @objc convenience public init?(mediaURL: Foundation.URL, text: Swift.String?, metadata: [Swift.String : Swift.AnyHashable]? = nil)
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension ZendeskSDKConversationKit.Message {
  @objc final public func isAuthoredBy(_ participant: ZendeskSDKConversationKit.Participant?) -> Swift.Bool
}
@objc(ZDKFormMessageContent) final public class FormMessageContent : ObjectiveC.NSObject, Swift.Codable, ZendeskSDKConversationKit.Content {
  @objc final public let id: Swift.String
  @objc final public var type: ZendeskSDKConversationKit.MessageType {
    @objc get
  }
  @objc final public var fields: [any ZendeskSDKConversationKit.Field] {
    @objc get
  }
  @objc final public let blockChatInput: Swift.Bool
  @objc final public var metadata: [Swift.String : Swift.AnyHashable]? {
    @objc get
  }
  final public let formFields: [ZendeskSDKConversationKit.FormField]
  public init(id: Swift.String, formFields: [ZendeskSDKConversationKit.FormField], blockChatInput: Swift.Bool, metadata: [Swift.String : Swift.AnyHashable]? = nil)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DefaultRESTClientBuilder {
  public static func resolveAuthorizationHeader(authentication: ZendeskSDKConversationKit.Authentication, userId: Swift.String) -> Swift.String?
}
public typealias PostbackActionID = Swift.String
@objc(ZDKConversationStatus) public enum ConversationStatus : Swift.Int, Swift.Codable {
  case active
  case idle
  case unknown
  public init?(rawValue: Swift.String)
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(ZDKMessageAction) public protocol MessageAction : ObjectiveC.NSObjectProtocol {
  @objc var id: Swift.String { get }
  @objc var type: ZendeskSDKConversationKit.ActionType { get }
  @objc var metadata: [Swift.String : Swift.AnyHashable]? { get }
}
@objc(ZDKActionType) public enum ActionType : Swift.Int, Swift.Codable {
  case buy
  case link
  case locationRequest
  case postback
  case reply
  case share
  case webview
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MessageActionModel : Swift.Equatable, Swift.Hashable {
  case buy(ZendeskSDKConversationKit.BuyAction)
  case link(ZendeskSDKConversationKit.LinkAction)
  case locationRequest(ZendeskSDKConversationKit.LocationRequestAction)
  case postback(ZendeskSDKConversationKit.PostbackAction)
  case reply(ZendeskSDKConversationKit.ReplyAction)
  case share(ZendeskSDKConversationKit.ShareAction)
  case webview(ZendeskSDKConversationKit.WebViewAction)
  public var text: Swift.String {
    get
  }
  public static func == (a: ZendeskSDKConversationKit.MessageActionModel, b: ZendeskSDKConversationKit.MessageActionModel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ZendeskSDKConversationKit.MessageActionModel : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension ZendeskSDKConversationKit.MessageActionModel {
  public var value: any ZendeskSDKConversationKit.MessageAction {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(ZDKReplyAction) final public class ReplyAction : ObjectiveC.NSObject, Swift.Codable, ZendeskSDKConversationKit.MessageAction {
  @objc final public let id: Swift.String
  @objc final public var type: ZendeskSDKConversationKit.ActionType {
    @objc get
  }
  @objc final public let text: Swift.String
  @objc final public let payload: Swift.String
  @objc final public let iconUrl: Swift.String?
  @objc final public var metadata: [Swift.String : Swift.AnyHashable]? {
    @objc get
  }
  public init(id: Swift.String, text: Swift.String, metadata: [Swift.String : Swift.AnyHashable]? = nil, payload: Swift.String, iconUrl: Swift.String?)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(ZDKEmailFormField) final public class EmailFormField : ObjectiveC.NSObject, Swift.Codable, ZendeskSDKConversationKit.Field {
  @objc final public var type: ZendeskSDKConversationKit.FieldType {
    @objc get
  }
  @objc final public let id: Swift.String
  @objc final public let email: Swift.String
  @objc final public let name: Swift.String
  @objc final public let label: Swift.String
  @objc final public let placeholder: Swift.String?
  @objc final public var value: Swift.String {
    @objc get
  }
  public init(id: Swift.String, email: Swift.String, name: Swift.String, label: Swift.String, placeholder: Swift.String?)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(ZDKFileMessageContent) final public class FileMessageContent : ObjectiveC.NSObject, Swift.Codable, ZendeskSDKConversationKit.Content {
  @objc final public var type: ZendeskSDKConversationKit.MessageType {
    @objc get
  }
  @objc final public let text: Swift.String
  @objc final public let altText: Swift.String
  @objc final public let mediaURL: Swift.String
  @objc final public let attachmentId: Swift.String?
  @objc final public let mediaType: Swift.String
  @objc final public let mediaSize: Swift.Int64
  @objc final public var metadata: [Swift.String : Swift.AnyHashable]? {
    @objc get
  }
  public init(text: Swift.String, altText: Swift.String, mediaURL: Swift.String, attachmentId: Swift.String? = nil, mediaType: Swift.String, mediaSize: Swift.Int64, metadata: [Swift.String : Swift.AnyHashable]? = nil)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(ZDKMessageStatus) public enum MessageStatus : Swift.Int, Swift.Codable {
  case pending
  case sent
  case failed
  case exceedsMaxFileSize
  case failedAttachmentNotSupported
  public var isFailed: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(ZDKShareAction) final public class ShareAction : ObjectiveC.NSObject, Swift.Codable, ZendeskSDKConversationKit.MessageAction {
  @objc final public let id: Swift.String
  @objc final public var type: ZendeskSDKConversationKit.ActionType {
    @objc get
  }
  @objc final public var metadata: [Swift.String : Swift.AnyHashable]? {
    @objc get
  }
  public init(id: Swift.String, metadata: [Swift.String : Swift.AnyHashable]? = nil)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc(ZDKBuyAction) final public class BuyAction : ObjectiveC.NSObject, Swift.Codable, ZendeskSDKConversationKit.MessageAction {
  @objc final public let id: Swift.String
  @objc final public var type: ZendeskSDKConversationKit.ActionType {
    @objc get
  }
  @objc final public let text: Swift.String
  @objc final public let uri: Swift.String
  @objc final public let `default`: Swift.Bool
  @objc final public let amount: Swift.Double
  @objc final public let currency: Swift.String
  @objc final public let state: ZendeskSDKConversationKit.MessageActionBuyState
  @objc final public var metadata: [Swift.String : Swift.AnyHashable]? {
    @objc get
  }
  public init(id: Swift.String, text: Swift.String, uri: Swift.String, default: Swift.Bool, amount: Swift.Double, currency: Swift.String, state: ZendeskSDKConversationKit.MessageActionBuyState, metadata: [Swift.String : Swift.AnyHashable]? = nil)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(ZDKMessageActionBuyState) public enum MessageActionBuyState : Swift.Int, Swift.Codable {
  case offered
  case paid
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(ZDKTextFormField) final public class TextFormField : ObjectiveC.NSObject, Swift.Codable, ZendeskSDKConversationKit.Field {
  @objc final public var type: ZendeskSDKConversationKit.FieldType {
    @objc get
  }
  @objc final public let id: Swift.String
  @objc final public let text: Swift.String
  @objc final public let name: Swift.String
  @objc final public let label: Swift.String
  @objc final public let placeholder: Swift.String?
  final public let minSize: Swift.Int?
  final public let maxSize: Swift.Int?
  @objc final public var value: Swift.String {
    @objc get
  }
  public init(id: Swift.String, text: Swift.String, name: Swift.String, label: Swift.String, placeholder: Swift.String?, minSize: Swift.Int?, maxSize: Swift.Int?)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension ZendeskSDKConversationKit.TextFormField {
  @available(swift, obsoleted: 1.0)
  @objc final public var minSizeObjc: Swift.Int {
    @objc get
  }
  @available(swift, obsoleted: 1.0)
  @objc final public var maxSizeObjc: Swift.Int {
    @objc get
  }
}
@_hasMissingDesignatedInitializers @objc(ZDKAuthentication) final public class Authentication : ObjectiveC.NSObject, Swift.Codable {
  @objc final public var type: ZendeskSDKConversationKit.AuthenticationType
  @objc final public var token: Swift.String?
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(ZDKAuthenticationType) public enum AuthenticationType : Swift.Int, Swift.Codable {
  case sessionToken
  case jwt
  case unauthenticated
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension ZendeskSDKConversationKit.ConversationType : Swift.Equatable {}
extension ZendeskSDKConversationKit.ConversationType : Swift.Hashable {}
extension ZendeskSDKConversationKit.ConversationType : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.Subrole : Swift.Equatable {}
extension ZendeskSDKConversationKit.Subrole : Swift.Hashable {}
extension ZendeskSDKConversationKit.Subrole : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.ProactiveMessageStatus : Swift.Equatable {}
extension ZendeskSDKConversationKit.ProactiveMessageStatus : Swift.Hashable {}
extension ZendeskSDKConversationKit.ProactiveMessageStatus : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.ActionItemSize : Swift.Equatable {}
extension ZendeskSDKConversationKit.ActionItemSize : Swift.Hashable {}
extension ZendeskSDKConversationKit.ActionItemSize : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.AuthorType : Swift.Hashable {}
extension ZendeskSDKConversationKit.AuthorType : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.ActivityType : Swift.Equatable {}
extension ZendeskSDKConversationKit.ActivityType : Swift.Hashable {}
extension ZendeskSDKConversationKit.ActivityType : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.Config.Region : Swift.Equatable {}
extension ZendeskSDKConversationKit.Config.Region : Swift.Hashable {}
extension ZendeskSDKConversationKit.Config.Region : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.ConversationRoutingStatus : Swift.Equatable {}
extension ZendeskSDKConversationKit.ConversationRoutingStatus : Swift.Hashable {}
extension ZendeskSDKConversationKit.ConversationRoutingStatus : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.MessageType : Swift.Equatable {}
extension ZendeskSDKConversationKit.MessageType : Swift.Hashable {}
extension ZendeskSDKConversationKit.MessageType : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.ZDKConversationKitEvent : Swift.Equatable {}
extension ZendeskSDKConversationKit.ZDKConversationKitEvent : Swift.Hashable {}
extension ZendeskSDKConversationKit.ZDKConversationKitEvent : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.FieldType : Swift.Equatable {}
extension ZendeskSDKConversationKit.FieldType : Swift.Hashable {}
extension ZendeskSDKConversationKit.FieldType : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.ConnectionStatus : Swift.Equatable {}
extension ZendeskSDKConversationKit.ConnectionStatus : Swift.Hashable {}
extension ZendeskSDKConversationKit.ConnectionStatus : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.WebViewActionSize : Swift.Hashable {}
extension ZendeskSDKConversationKit.WebViewActionSize : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.VisitType : Swift.Equatable {}
extension ZendeskSDKConversationKit.VisitType : Swift.Hashable {}
extension ZendeskSDKConversationKit.VisitType : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.ConversationStatus : Swift.Equatable {}
extension ZendeskSDKConversationKit.ConversationStatus : Swift.Hashable {}
extension ZendeskSDKConversationKit.ConversationStatus : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.ActionType : Swift.Equatable {}
extension ZendeskSDKConversationKit.ActionType : Swift.Hashable {}
extension ZendeskSDKConversationKit.ActionType : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.MessageStatus : Swift.Equatable {}
extension ZendeskSDKConversationKit.MessageStatus : Swift.Hashable {}
extension ZendeskSDKConversationKit.MessageStatus : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.MessageActionBuyState : Swift.Equatable {}
extension ZendeskSDKConversationKit.MessageActionBuyState : Swift.Hashable {}
extension ZendeskSDKConversationKit.MessageActionBuyState : Swift.RawRepresentable {}
extension ZendeskSDKConversationKit.AuthenticationType : Swift.Equatable {}
extension ZendeskSDKConversationKit.AuthenticationType : Swift.Hashable {}
extension ZendeskSDKConversationKit.AuthenticationType : Swift.RawRepresentable {}
