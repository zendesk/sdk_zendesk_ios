// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ZendeskSDKHTTPClient
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Foundation
import Swift
import UIKit
@_exported import ZendeskSDKHTTPClient
import ZendeskSDKLogger
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum HTTPHeader : Swift.Hashable {
  case userAgent(Swift.String)
  case contentLength(Swift.String)
  case contentType(Swift.String)
  case accept(Swift.String)
  case acceptEncoding(Swift.String)
  case authorization(Swift.String)
  case other(field: Swift.String, value: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ZendeskSDKHTTPClient.HTTPHeader, b: ZendeskSDKHTTPClient.HTTPHeader) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum HTTPError : Foundation.LocalizedError {
  case expectedEmptyResponse(_: Foundation.Data)
  case noResponse
  case failedToDecode(data: Foundation.Data?, response: Foundation.HTTPURLResponse, error: any Swift.Error)
  case unsuccessfulStatusCodeForRequest(statusCode: Swift.Int, data: Foundation.Data?, response: Foundation.HTTPURLResponse)
  case requestFailed(error: any Swift.Error)
  case multiConvoNotEnabled
  case userCannotCreateMoreConversations
  case badRequest
  public var errorDescription: Swift.String? {
    get
  }
}
extension ZendeskSDKHTTPClient.HTTPError : Swift.Equatable {
  public static func == (lhs: ZendeskSDKHTTPClient.HTTPError, rhs: ZendeskSDKHTTPClient.HTTPError) -> Swift.Bool
}
public typealias CompletionHandler = (Swift.Result<(Foundation.Data, Foundation.HTTPURLResponse), ZendeskSDKHTTPClient.HTTPError>) -> Swift.Void
public protocol HTTPClient {
  var baseURL: Foundation.URL { get }
  var defaultHeaders: [ZendeskSDKHTTPClient.HTTPHeader] { get }
  var urlSession: Foundation.URLSession { get }
  @discardableResult
  func performRequest<D, E>(withBody body: E, method: ZendeskSDKHTTPClient.HTTPMethodWithBody, responseType: D.Type, path: Swift.String, query: [Swift.String : Swift.String]?, headers: [ZendeskSDKHTTPClient.HTTPHeader]?, completionHandler: @escaping (Swift.Result<ZendeskSDKHTTPClient.HTTPClientResponse<D>, ZendeskSDKHTTPClient.HTTPError>) -> Swift.Void) -> Foundation.URLSessionDataTask where D : Swift.Decodable, E : Swift.Encodable
  @discardableResult
  func performRequest<D, E>(withBody body: E, method: ZendeskSDKHTTPClient.HTTPMethodWithBody, responseType: D.Type, path: Swift.String, waitsForConnectivity: Swift.Bool, query: [Swift.String : Swift.String]?, headers: [ZendeskSDKHTTPClient.HTTPHeader]?, completionHandler: @escaping (Swift.Result<ZendeskSDKHTTPClient.HTTPClientResponse<D>, ZendeskSDKHTTPClient.HTTPError>) -> Swift.Void) -> Foundation.URLSessionDataTask where D : Swift.Decodable, E : Swift.Encodable
  @discardableResult
  func performRequest<D>(method: ZendeskSDKHTTPClient.HTTPMethodWithoutBody, responseType: D.Type, path: Swift.String, query: [Swift.String : Swift.String]?, headers: [ZendeskSDKHTTPClient.HTTPHeader]?, completionHandler: @escaping (Swift.Result<ZendeskSDKHTTPClient.HTTPClientResponse<D>, ZendeskSDKHTTPClient.HTTPError>) -> Swift.Void) -> Foundation.URLSessionDataTask where D : Swift.Decodable
  @discardableResult
  func performRequest<D>(withBodyData bodyData: Foundation.Data, method: ZendeskSDKHTTPClient.HTTPMethodWithBody, responseType: D.Type, path: Swift.String, query: [Swift.String : Swift.String]?, headers: [ZendeskSDKHTTPClient.HTTPHeader]?, completionHandler: @escaping (Swift.Result<ZendeskSDKHTTPClient.HTTPClientResponse<D>, ZendeskSDKHTTPClient.HTTPError>) -> Swift.Void) -> Foundation.URLSessionDataTask where D : Swift.Decodable
  @discardableResult
  func performRequest<E>(withBody body: E, method: ZendeskSDKHTTPClient.HTTPMethodWithBody, path: Swift.String, query: [Swift.String : Swift.String]?, headers: [ZendeskSDKHTTPClient.HTTPHeader]?, completionHandler: @escaping (Swift.Result<ZendeskSDKHTTPClient.HTTPClientResponse<ZendeskSDKHTTPClient.Empty>, ZendeskSDKHTTPClient.HTTPError>) -> Swift.Void) -> Foundation.URLSessionDataTask where E : Swift.Encodable
  @discardableResult
  func performUploadRequest<D>(withBodyData bodyData: Foundation.Data, method: ZendeskSDKHTTPClient.HTTPMethodWithBody, responseType: D.Type, path: Swift.String, query: [Swift.String : Swift.String]?, headers: [ZendeskSDKHTTPClient.HTTPHeader]?, completionHandler: @escaping (Swift.Result<ZendeskSDKHTTPClient.HTTPClientResponse<D>, ZendeskSDKHTTPClient.HTTPError>) -> Swift.Void) -> Foundation.URLSessionDataTask where D : Swift.Decodable
}
public struct HTTPClientBuilder {
  public init(urlSessionConfiguration: Foundation.URLSessionConfiguration = URLSessionConfiguration.default, defaultHeaders: [ZendeskSDKHTTPClient.HTTPHeader], baseURL: Swift.String)
  public func build() throws -> any ZendeskSDKHTTPClient.HTTPClient
}
public enum HTTPClientError : Swift.Error {
  case invalidBaseURL
  public static func == (a: ZendeskSDKHTTPClient.HTTPClientError, b: ZendeskSDKHTTPClient.HTTPClientError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum HTTPMethodWithBody : Swift.String {
  case POST
  case PUT
  case DELETE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HTTPMethodWithoutBody : Swift.String {
  case GET
  case HEAD
  case OPTIONS
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Empty : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct HTTPClientResponse<D> where D : Swift.Decodable {
  public let response: Foundation.HTTPURLResponse
  public let responseObject: D
  public init(response: Foundation.HTTPURLResponse, responseObject: D)
}
extension ZendeskSDKHTTPClient.HTTPClientError : Swift.Equatable {}
extension ZendeskSDKHTTPClient.HTTPClientError : Swift.Hashable {}
extension ZendeskSDKHTTPClient.HTTPMethodWithBody : Swift.Equatable {}
extension ZendeskSDKHTTPClient.HTTPMethodWithBody : Swift.Hashable {}
extension ZendeskSDKHTTPClient.HTTPMethodWithBody : Swift.RawRepresentable {}
extension ZendeskSDKHTTPClient.HTTPMethodWithoutBody : Swift.Equatable {}
extension ZendeskSDKHTTPClient.HTTPMethodWithoutBody : Swift.Hashable {}
extension ZendeskSDKHTTPClient.HTTPMethodWithoutBody : Swift.RawRepresentable {}
